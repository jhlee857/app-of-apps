# Default values for service-mesh-app.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""
serviceNameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# Datadog
datadogAgent: 
  # Agent enable
  enabled: true

podAnnotations: {}
podSelectorLabels: ""
podLabels: ""

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

topologySpreadConstraints: {}

## ------------------------
## Container - Application
## -- 애플리케이션의 Command, Port, Probe, ConfigMap, Secrets (환경 변수 또는 VolumeMount) 설정등을 수행합니다.
## ------------------------
application:
  command: 
  # -- Pod 생성시 수행할 Command와 Argument 를 정의합니다. (참고: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/)
  #   - /bin/sh
  #   - -c
  #   - >-
  #     java
  #     ${JAVA_OPTS}
  #     -Dspring.profiles.active=${PROFILE}
  #     -Dspring.config.location=${CONFIG_FILE_PATH}
  #     -Dspring.jpa.hibernate.ddl-auto=validate
  #     -jar /poc/boot.jar

  #? CONTAINER SERVICE WITH ACTUATOR
  # -- 컨테이너의 타겟 포트를 정의합니다. 서비스 포트는 Pod의 컨테이너포트를 바인딩합니다.
  containerPort: 8080
  # -- 헬스체크 포트를 별도로 분리시에 사용합니다(예) Spring Boot Actuator)
  # healthCheckPort: 8081
  # -- Liveness, Readiness, Startup Probes 등을 정의합니다 (참고): https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/)
  livenessProbe:
    # httpGet:
    #   path: "/actuator/health/liveness"
    #   port: healthCheck-port
    # initialDelaySeconds: 18
    # periodSeconds: 3
    # timeoutSeconds: 1
    # successThreshold: 1
    # failureThreshold: 3
  # -- Liveness, Readiness, Startup Probes 등을 정의합니다 (참고: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/)
  readinessProbe:
  #   httpGet:
  #     path: "/actuator/health/readiness"
  #     port: healthCheck-port
  #   initialDelaySeconds: 15
  #   periodSeconds: 3
  #   timeoutSeconds: 1
  #   successThreshold: 1
  #   failureThreshold: 4
  # -- Liveness, Readiness, Startup Probes 등을 정의합니다. (참고: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/)
  startupProbe:  
    # httpGet:
    #   path: /healthz
    #   port: liveness-port
    # failureThreshold: 30
    # periodSeconds: 10z

  # -- Pod에 Volume 을 마운트하기 위한 정보를 정의합니다. 
  # configFile:
  #   # -- 파일이 Mount 될 Pod 내의 경로를 정의합니다. 
  #   podMountPath: ""
  #   # podMountPath: "/config/app/"
  #   # -- Pod에 Mount 할 파일의 경로를 입력합니다. 차트내에 해당 파일이 존재하여야 하며. Configmap 으로 마운트 되므로 파일 사이즈는 1MB를 초과하지 않아야 합니다. 
  #   localChartPath: ""
    # localChartPath: "configs/application.yaml"

  # -- ConfigMap 정보를 정의합니다. 정의한 값들은 POD의 환경변수(ENV)로 주입됩니다.
  # configMap: #! string: string
    # -- ConfigMap 에 넣어줄 Key:Value Pair를 정의합니다. 정의한 값들은 POD의 환경변수(ENV)로 주입됩니다.
    # PROFILE: "default"

  # -- ExternalSecretsOperator 를 통해 Kubernetes Secretes 를 생성하기 위한 정보를 정의합니다. (참고 : https://external-secrets.io/v0.8.1/)
  # sensitiveMap: {}
    # # -- ClusterSecretStore를 구분하기 위한 ID 값을 입력합니다. ID Prefix에 의해 ClusterSecretStore가 생상되고 ExternalSecret이 해당 ClusterSecretStore를 참조합니다. (참고 : https://external-secrets.io/v0.4.4/api-clustersecretstore/)
    # - id: "" 
    #   # -- ClusterSecretsStore 가 바인딩할 IRSA 를 정의합니다. AWS SecretsManager 로부터 정보를 불러오기 위한 IAM 권한이 맵핑되어 있어야 합니다.
    #   secretBinderSA: {}
    #     # name: external-secrets-sa
    #     # namespace: external-secrets    
    #   # -- Secrets 정보가 저장된 AWS SecretsManager ID를 정의합니다.
    #   secretManagerName: "" # at AWS Secrets Manager
    #   # -- SecretsManager 로부터 불러온 값들을 Kubernetes Secrets 로 생성하기 위한 정보를 입력합니다.
    #   secretBind:
    #     # --  remoteKey: k8sSecretKey 바인딩 정보를 입력합니다. remoteKey 는 SecretsManager 에 저장된 Key 값이며, k8sSecretKey 는 K8S Secrets 에서 참조 하기 위한 키 값입니다.
    #     # tokenId: GITHUB_USERNAME
    #     # token: GITHUB_TOKEN
        
    #   # -- 생성된 K8S Secrets 정보를 POD에 주입시킬 타입을 정의합니다. 볼륨 또는 환경변수를 사용할 수 있습니다.
    #   injectWith:
    #     # -- env 값이 true 일 경우 위에서 정의한 k8sSecretKey 값들이 POD에 환경변수로 참조됩니다.
    #     env: true   # If true, use envFrom
    #     # -- file 값이 true 일 경우 위에서 정의한 k8sSecret 이 POD에 볼륨으로 마운트됩니다.
    #     file: false # If ture, use volumeMount
    #     # -- file 값이 true 일 경우 위에서 정의한 K8sSecrets 을 마운트할 POD의 경로입니다.
    #     path:
    #     # path: "/mounted/secrets/db"
  # -- DownwardAPIf를 통해 주입할 ENV Value 정보를 입력합니다.  
  # envFromfieldRefs:
  #   NODE_NAME: "spec.nodeName"

  # -- POD의 리소스 할당량을 정의합니다. (참고: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  resources: {}
  # volumes:
  #   - name: persistent-storage
  #     persistentVolumeClaim:
  #       claimName: efs-claim
  #     mountPath: /data


# -- Istio 사용 여부 및 애플리케이션과 동일한 라이프사이클을 가진 Istio CRD(VirtualService, DestinationRule 등)을 정의합니다.
istio:
  # -- Istio 사용 여부를 정의합니다.
  enabled: false
  # -- Istio AuthorizationPolicy 스펙을 정의합니다. (참고: https://istio.io/latest/docs/reference/config/security/authorization-policy/)
  authorizationPolicy: {}
    # action: ALLOW
    # rules:
    # - from:
    #   - source:
    #       notPrincipals: 
    #         - "cluster.local/ns/workloads/sa/bff"
    #         - "cluster.local/ns/istio-system/sa/workloads-ingressgateway"

  # -- Istio VirtualService 스펙을 정의합니다. (참고: https://istio.io/latest/docs/reference/config/networking/virtual-service/)
  virtualService: {}
    # -- 해당 경로를 적용해야 하는 Gateway 및 사이드카를 지정합니다. 게이트웨이와 사이드카 모두에 규칙을 적용하려면 게이트웨이의 이름중 하나로 "mesh" 를 지정합니다.
    # gateways:
    # # - "bookinfo-gateway"
    # # -- 트래픽이 전송되는 대상 호스트입니다. 모든 도메인을 허용하기 위해 '*' 를 사용하려면 해당값을 입력하지 않습니다.
    # hosts:
    #   # - "bookinfo.mate-technology.app"
    # # -- HTTP 트래픽에 대한 라우팅 규칙을 정의합니다. (참고: https://istio.io/latest/docs/reference/config/networking/virtual-service/#HTTPRoute)
    # http:
    #   # - match:
    #   #     - uri:
    #   #         prefix: /
    #   #   route:
    #   #     - destination:
    #   #         host: webfrontend-nuxt-ssr.ssp-mockup.svc.cluster.local
    #   #         port:
    #   #           number: 3000
    # # -- TLS 트래픽에 대한 라우팅 규칙을 정의합니다. (참고: https://istio.io/latest/docs/reference/config/networking/virtual-service/#TLSRoute)      
    # tls: 
    # # -- TCP 트래픽에 대한 라우팅 규칙을 정의합니다. (참고: https://istio.io/latest/docs/reference/config/networking/virtual-service/#TLSRoute)
    # tcp:
    # # -- VirtualService 를 내보낼 네임스페이스 목록입니다. 네임스페이스를 지정하지 않으면 VirtualService가 기본적으로 모든 네임스페이스로 내보내집니다.
    # exportTo: {}
  # -- Istio DestinationRule 스펙을 정의합니다. (참고: https://istio.io/latest/docs/reference/config/networking/destination-rule/)
  destinationRule: {}
  #   # -- 서비스 레지스트리에 등록된 서비스 이름을 지정합니다. 서비스 이름은 Kubernetes 서비스 레지스트리 및 ServiceEntries에 의해 선언된 호스트에서 조회합니다. 짧은 이름보다는 정규화된 도메인 이름 "service.namespace.svc.cluster.local" 을 사용하는 것이 권장됩니다.
  #   host:
  #   # -- 로드밸런싱, 커넥션 풀 사이즈, Outerlier Detecetion 등의 트래픽 정책을 정의합니다. (참고: https://istio.io/latest/docs/reference/config/networking/destination-rule/#TrafficPolicy )
  #   trafficPolicy: {}
  #   # -- 각 서비스의 개별 버전을 구분하기 위한 이름을 정의합니다. 각 서브셋별로 TrafficPolicy를 개별 정의할 수 있씁니다.(참고: https://istio.io/latest/docs/reference/config/networking/destination-rule/#Subset)
  #   subsets:
  #   # - name: v1
  #   #   labels:
  #   #     version: v1
  #   # - name: v2
  #   #   labels:
  #   #     version: v2-mysql
  #   # -- 해당 DestinationRule 구성을 적용해야 하는 특정 Pod/VM 집합을 지정합니다. 네임스페이스 경계를 넘어서 적용되지 않습니다. (참고: https://istio.io/latest/docs/reference/config/type/workload-selector/#WorkloadSelector)
  #   workloadSelector:
  #   # -- DestinationRule 을 내보낼 네임스페이스 목록입니다. 네임스페이스를 지정하지 않으면 DestinationRule이 기본적으로 모든 네임스페이스로 내보내집니다.
  #   exportTo: {}


# -- Argo Rollout 을 사용한 배포 전략을 정의합니다. (참고: https://argo-rollouts.readthedocs.io/en/stable/)
rollout:
  strategy: "rolling"

# # -- Canary Rollout 전략을 정의합니다. (참고: https://argoproj.github.io/argo-rollouts/features/canary/)
# rollout:
#   labels:
#   trafficRouting: subset
#   strategy: "canary"
#   steps:
#   - setWeight: 20
#     pauseDuration: 30s
#     analysis:
#       templates:
#       - templateName: success-rate
#       args:
#       - name: service-name
#         value: ssp-mockup
#   - setWeight: 40
#     pauseDuration: 30s
#   - setWeight: 60
#     pauseDuration: 30s
#   - setWeight: 80
#     pauseDuration: 30s 
#   # Configure the background Analysis to execute during the rollout. If the analysis is unsuccessful the rollout will be aborted.(https://argoproj.github.io/argo-rollouts/features/analysis/)
#   # Defaults to nil
#   # analysis:
#   #   templates:
#   #   - templateName: success-rate
#   #   startingStep: 2
#   #   args:
#   #   - name: service-name
#   #     value: media-contents-query-service-preview
#   # Check out the Anti Affinity(https://argoproj.github.io/argo-rollouts/features/anti-affinity/anti-affinity/) document document for more information.
#   # Defaults to nil
#   antiAffinity: {}
#   # canaryService references a Service that will be modified to send traffic to only the canary ReplicaSet. This allows users to only hit the canary ReplicaSet.
#   # Defaults to an empty string
#   canaryService: "" # string
#   # stableService the name of a Service which selects pods with stable version and doesn't select any pods with canary version. This allows users to only hit the stable ReplicaSet.
#   # Defaults to an empty string
#   stableService: "" # string
#   # maxSurge defines the maximum number of replicas the rollout can create to move to the correct ratio set by the last setWeight. Max Surge can either be an integer or percentage as a string (i.e. "20%")
#   # Defaults to "25%".
#   maxSurge: "25%" # stringOrInt
#   # The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxSurge is 0.
#   # Defaults to 25%
#   maxUnavailable: "25%" # stringOrInt
#   # The traffic management(https://argoproj.github.io/argo-rollouts/features/traffic-management/) rules to apply to control the flow of traffic between the active and canary versions. If not set, the default weighted pod replica based routing will be used.
#   # Defaults to nil

# -- BlueGreen Rollout 전략을 정의합니다. (참고: https://argoproj.github.io/argo-rollouts/features/bluegreen/)
# rollout:
#   strategy: "blueGreen"
#   # activeService specifies the service to update with the new template hash at time of promotion.
#   # This field is mandatory for the blueGreen update strategy.
#   # Default to an empty string
#   activeService: ""
#   # previewService specifies the service to update with the new template hash before promotion.
#   # This allows the preview stack to be reachable without serving production traffic.
#   # This field is optional.
#   # Default to an empty string
#   previewService: ""
#   # The AutoPromotionEnabled will make the rollout automatically promote the new ReplicaSet to the active service once the new ReplicaSet is healthy. This field is defaulted to true if it is not specified.
#   # Default to true
#   autoPromotionEnabled: true
#   # The AutoPromotionSeconds will make the rollout automatically promote the new ReplicaSet to active Service after the AutoPromotionSeconds time has passed since the rollout has entered a paused state. 
#   # If the AutoPromotionEnabled field is set to true, this field will be ignored
#   # Default to nil
#   autoPromotionSeconds: {}
#   # Check out the Anti Affinity document(https://argoproj.github.io/argo-rollouts/features/anti-affinity/anti-affinity/) document for more information.
#   # Default to nil
#   antiAffinity: {}
#   # The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxSurge is 0.
#   # Default to 0
#   maxUnavailable: 0
#   # Configures the Analysis before it switches traffic to the new version. The AnalysisRun can be used to block the Service selector switch until the AnalysisRun finishes successful. The success or failure of the analysis run decides if the Rollout will switch traffic, or abort the Rollout completely.
#   # Default to nil
#   prePromotionAnalysis: {}
#     # templates:
#     # - templateName: success-rate
#     # args:
#     # - name: service-name
#     #   value: preview-svc.default.svc.cluster.local
#   # Configures the Analysis after the traffic switch to new version. If the analysis run fails or errors out, the Rollout enters an aborted state and switch traffic back to the previous stable Replicaset. If scaleDownDelaySeconds is specified, the controller will cancel any AnalysisRuns at time of scaleDownDelay to scale down the ReplicaSet. If it is omitted, and post analysis is specified, it will scale down the ReplicaSet only after the AnalysisRun completes (with a minimum of 30 seconds).
#   # Default to nil
#   postPromotionAnalysis: {}
#     # templates:
#     # - templateName: error-rate
#     # args:
#     # - name: service-name
#     #   value: preview-svc.default.svc.cluster.local  
#   # The PreviewReplicaCount field will indicate the number of replicas that the new version of an application should run. Once the application is ready to promote to the active service, the controller will scale the new ReplicaSet to the value of the spec.replicas. The rollout will not switch over the active service to the new ReplicaSet until it matches the spec.replicas count.
#   # This feature is mainly used to save resources during the testing phase. If the application does not need a fully scaled up application for the tests, this feature can help save some resources.
#   # If omitted, the preview ReplicaSet stack will be scaled to 100% of the replicas
#   # previewReplicaCount: 
#   # The ScaleDownDelaySeconds is used to delay scaling down the old ReplicaSet after the active Service is switched to the new ReplicaSet.
#   # Default to 30
#   scaleDownDelaySeconds: 30
#   # The ScaleDownDelayRevisionLimit limits the number of old active ReplicaSets to keep scaled up while they wait for the scaleDownDelay to pass after being removed from the active service.
#   # If omitted, all ReplicaSets will be retained for the specified scaleDownDelay
#   # scaleDownDelayRevisionLimit:

# -- 점진적으로 메트릭을 측정하면서 CD를 수행하기 위한 Argo Rollout 템플릿을 정의합니다. (참고: https://argoproj.github.io/argo-rollouts/features/analysis/, https://github.com/argoproj/argo-rollouts/blob/master/examples/analysis-templates.yaml)
# analysisTemplate:
#   templates:
#   - name: success-rate
#     args:
#     - name: service-name
#     metrics:
#     - name: success-rate
#       interval: 1m
#       # NOTE: prometheus queries return results in the form of a vector.
#       # So it is common to access the index 0 of the returned array to obtain the value
#       successCondition: isNaN(result[0]) || result[0] >= 0.95
#       #failureCondition: result[0] < 0.95
#       failureLimit: 5
#       provider:
#         prometheus:
#           address: http://prometheus-kube-prometheus-prometheus.prometheus.svc.cluster.local:9090
#           query: |
#             sum(irate(
#               istio_requests_total{destination_service_name="{{args.service-name}}",response_code="200"}[2m]
#             )) / 
#             sum(irate(
#               istio_requests_total{destination_service_name="{{args.service-name}}"}[2m]
#             ))      

